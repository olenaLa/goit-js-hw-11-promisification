{"version":3,"sources":["js/task-3.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","canProcess","time","Promise","resolve","reject","setTimeout","logSuccess","id","console","log","logError","warn","amount","then","catch"],"mappings":";AAGA,IAAMA,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAiBhDK,EAAkB,SAACC,GACfC,IAAAA,EAAQR,EAA0B,IAAK,KACvCS,EAAaN,KAAKE,SAAW,GAE5B,OADPE,EAAYG,KAAOF,EACZ,IAAIG,QAAQ,SAACC,EAASC,GAC7BC,WAAW,WACLL,EACFG,EAAQL,GAERM,EAAON,IAERC,MAYDO,EAAa,SAAiB,GAAdC,IAAAA,EAAAA,EAAAA,GAAIN,EAAAA,EAAAA,KACxBO,QAAQC,IAAmBF,eAAAA,OAAAA,EAAmBN,kBAAAA,OAAAA,EAA9C,QAEIS,EAAW,SAAY,GAATH,IAAAA,EAAAA,EAAAA,GAClBC,QAAQG,KAAqCJ,gCAAAA,OAAAA,EAA7C,+BAaFV,EAAgB,CAAEU,GAAI,GAAIK,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ","file":"task-3.9bdbc8e3.js","sourceRoot":"..\\src","sourcesContent":["// Перепиши функцію makeTransaction() так, щоб вона не використовувала callback - функції\r\n// onSuccess і onError, а приймала всього один параметр transaction і повертала проміс.\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\n// const makeTransaction = (transaction, onSuccess, onError) => {\r\n//   const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//   setTimeout(() => {\r\n//     const canProcess = Math.random() > 0.3;\r\n\r\n//     if (canProcess) {\r\n//       onSuccess(transaction.id, delay);\r\n//     } else {\r\n//       onError(transaction.id);\r\n//     }\r\n//   }, delay);\r\n// };\r\n\r\nconst makeTransaction = (transaction) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    const canProcess = Math.random() > 0.3;\r\n    transaction.time = delay;\r\n    return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (canProcess) {\r\n        resolve(transaction);\r\n      } else {\r\n        reject(transaction);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\n// const logSuccess = (id, time) => {\r\n//   console.log(`Transaction ${id} processed in ${time}ms`);\r\n// };\r\n\r\n// const logError = id => {\r\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n// };\r\n\r\nconst logSuccess = ({ id, time}) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\nconst logError = ({ id }) => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n//  * Працює так\r\n//  */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n//  * Повинно працювати так\r\n//  */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\n// makeTransaction({ id: 71, amount: 230 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n\r\n// makeTransaction({ id: 72, amount: 75 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n\r\n// makeTransaction({ id: 73, amount: 100 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);"]}