{"version":3,"sources":["js/task-1.js","js/task-2.js","js/task-3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","canProcess","reject","logSuccess","id","logError","warn","amount","catch"],"mappings":";AAKA,IAAMA,EAAQ,SAAAC,GACL,OAAA,IAAIC,QAAQ,SAAAC,GACjBC,WAAW,WACTD,EAAWF,GAAAA,OAAAA,KACVA,MAIDI,EAAS,SAAAC,GAAQC,OAAAA,QAAQC,IAAsBF,kBAAAA,OAAAA,EAAlC,QAGnBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ;;ACqBjB,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EApCA,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAWnBC,EAAkB,SAACC,EAAUC,GACxB,OAAA,IAAIb,QAAQ,SAAAC,GACXA,EAAQW,EAASE,IAAI,SAAAC,GACrBA,OAAAA,EAAKN,OAASI,EAAgBE,EAAAA,EAAAA,GAAAA,GAA9B,GAAA,CAAoCL,QAASK,EAAKL,SAAWK,QAKnEZ,EAAS,SAAAa,GAAgBX,OAAAA,QAAQY,MAAMD,IAY7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;ACpCnC,IAAMe,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAiBhDK,EAAkB,SAACC,GACf3B,IAAAA,EAAQoB,EAA0B,IAAK,KACvCQ,EAAaL,KAAKE,SAAW,GAE5B,OADPE,EAAYrB,KAAON,EACZ,IAAIE,QAAQ,SAACC,EAAS0B,GAC7BzB,WAAW,WACLwB,EACFzB,EAAQwB,GAERE,EAAOF,IAER3B,MAYD8B,EAAa,SAAiB,GAAdC,IAAAA,EAAAA,EAAAA,GAAIzB,EAAAA,EAAAA,KACxBC,QAAQC,IAAmBuB,eAAAA,OAAAA,EAAmBzB,kBAAAA,OAAAA,EAA9C,QAEI0B,EAAW,SAAY,GAATD,IAAAA,EAAAA,EAAAA,GAClBxB,QAAQ0B,KAAqCF,gCAAAA,OAAAA,EAA7C,+BAaFL,EAAgB,CAAEK,GAAI,GAAIG,OAAQ,MAC/BzB,KAAKqB,GACLK,MAAMH;;AC7DT,aAFA,QAAA,eACA,QAAA,eACA,QAAA","file":"src.1374e1bc.js","sourceRoot":"..\\src","sourcesContent":["// Напиши функцію delay(ms), яка повертає проміс,\r\n//   що переходить в стан \"resolved\" через ms мілісекунд.\r\n// Значенням промісу, яке виповнилося має бути та кількість\r\n// мілісекунд, яку передали під час виклику функції delay.\r\n\r\nconst delay = ms => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(`${ms}`);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Виклич функції для перевірки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","// Перепиши функцію toggleUserState() так, щоб вона не використовувала callback - функцію\r\n// callback, а приймала всього два параметри allUsers і userName і повертала проміс.\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\n// const toggleUserState = (allUsers, userName, callback) => {\r\n//   const updatedUsers = allUsers.map(user =>\r\n//     user.name === userName ? { ...user, active: !user.active } : user,\r\n//   );\r\n\r\n//   callback(updatedUsers);\r\n// };\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise(resolve => {\r\n            resolve(allUsers.map(user =>\r\n            user.name === userName ? { ...user, active: !user.active } : user,),\r\n        );\r\n   });\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n\r\n// /*\r\n//  * Зараз працює так\r\n//  */\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Повинно працювати так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","// Перепиши функцію makeTransaction() так, щоб вона не використовувала callback - функції\r\n// onSuccess і onError, а приймала всього один параметр transaction і повертала проміс.\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\n// const makeTransaction = (transaction, onSuccess, onError) => {\r\n//   const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//   setTimeout(() => {\r\n//     const canProcess = Math.random() > 0.3;\r\n\r\n//     if (canProcess) {\r\n//       onSuccess(transaction.id, delay);\r\n//     } else {\r\n//       onError(transaction.id);\r\n//     }\r\n//   }, delay);\r\n// };\r\n\r\nconst makeTransaction = (transaction) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    const canProcess = Math.random() > 0.3;\r\n    transaction.time = delay;\r\n    return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (canProcess) {\r\n        resolve(transaction);\r\n      } else {\r\n        reject(transaction);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\n// const logSuccess = (id, time) => {\r\n//   console.log(`Transaction ${id} processed in ${time}ms`);\r\n// };\r\n\r\n// const logError = id => {\r\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n// };\r\n\r\nconst logSuccess = ({ id, time}) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\nconst logError = ({ id }) => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n//  * Працює так\r\n//  */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n//  * Повинно працювати так\r\n//  */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\n// makeTransaction({ id: 71, amount: 230 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n\r\n// makeTransaction({ id: 72, amount: 75 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n\r\n// makeTransaction({ id: 73, amount: 100 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);","import './js/task-1';\r\nimport './js/task-2';\r\nimport './js/task-3';"]}